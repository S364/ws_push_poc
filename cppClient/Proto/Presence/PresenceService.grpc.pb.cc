// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: PresenceService.proto

#define _WIN32_WINNT 0x600
#define WIN32_LEAN_AND_MEAN

#include "PresenceService.pb.h"
#include "PresenceService.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace interfaces {

static const char* IPresenceService_method_names[] = {
  "/interfaces.IPresenceService/PresenceConnect",
  "/interfaces.IPresenceService/PresenceGetStateAndSub",
};

std::unique_ptr< IPresenceService::Stub> IPresenceService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< IPresenceService::Stub> stub(new IPresenceService::Stub(channel));
  return stub;
}

IPresenceService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_PresenceConnect_(IPresenceService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PresenceGetStateAndSub_(IPresenceService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status IPresenceService::Stub::PresenceConnect(::grpc::ClientContext* context, const ::interfaces::PresenceConnectRequest& request, ::interfaces::PresenceState* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PresenceConnect_, context, request, response);
}

void IPresenceService::Stub::experimental_async::PresenceConnect(::grpc::ClientContext* context, const ::interfaces::PresenceConnectRequest* request, ::interfaces::PresenceState* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PresenceConnect_, context, request, response, std::move(f));
}

void IPresenceService::Stub::experimental_async::PresenceConnect(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::interfaces::PresenceState* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PresenceConnect_, context, request, response, std::move(f));
}

void IPresenceService::Stub::experimental_async::PresenceConnect(::grpc::ClientContext* context, const ::interfaces::PresenceConnectRequest* request, ::interfaces::PresenceState* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PresenceConnect_, context, request, response, reactor);
}

void IPresenceService::Stub::experimental_async::PresenceConnect(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::interfaces::PresenceState* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PresenceConnect_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::interfaces::PresenceState>* IPresenceService::Stub::AsyncPresenceConnectRaw(::grpc::ClientContext* context, const ::interfaces::PresenceConnectRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::interfaces::PresenceState>::Create(channel_.get(), cq, rpcmethod_PresenceConnect_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::interfaces::PresenceState>* IPresenceService::Stub::PrepareAsyncPresenceConnectRaw(::grpc::ClientContext* context, const ::interfaces::PresenceConnectRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::interfaces::PresenceState>::Create(channel_.get(), cq, rpcmethod_PresenceConnect_, context, request, false);
}

::grpc::Status IPresenceService::Stub::PresenceGetStateAndSub(::grpc::ClientContext* context, const ::interfaces::PresenceGetStateAndSubRequest& request, ::interfaces::PresenceState* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PresenceGetStateAndSub_, context, request, response);
}

void IPresenceService::Stub::experimental_async::PresenceGetStateAndSub(::grpc::ClientContext* context, const ::interfaces::PresenceGetStateAndSubRequest* request, ::interfaces::PresenceState* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PresenceGetStateAndSub_, context, request, response, std::move(f));
}

void IPresenceService::Stub::experimental_async::PresenceGetStateAndSub(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::interfaces::PresenceState* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PresenceGetStateAndSub_, context, request, response, std::move(f));
}

void IPresenceService::Stub::experimental_async::PresenceGetStateAndSub(::grpc::ClientContext* context, const ::interfaces::PresenceGetStateAndSubRequest* request, ::interfaces::PresenceState* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PresenceGetStateAndSub_, context, request, response, reactor);
}

void IPresenceService::Stub::experimental_async::PresenceGetStateAndSub(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::interfaces::PresenceState* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PresenceGetStateAndSub_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::interfaces::PresenceState>* IPresenceService::Stub::AsyncPresenceGetStateAndSubRaw(::grpc::ClientContext* context, const ::interfaces::PresenceGetStateAndSubRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::interfaces::PresenceState>::Create(channel_.get(), cq, rpcmethod_PresenceGetStateAndSub_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::interfaces::PresenceState>* IPresenceService::Stub::PrepareAsyncPresenceGetStateAndSubRaw(::grpc::ClientContext* context, const ::interfaces::PresenceGetStateAndSubRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::interfaces::PresenceState>::Create(channel_.get(), cq, rpcmethod_PresenceGetStateAndSub_, context, request, false);
}

IPresenceService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      IPresenceService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< IPresenceService::Service, ::interfaces::PresenceConnectRequest, ::interfaces::PresenceState>(
          std::mem_fn(&IPresenceService::Service::PresenceConnect), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      IPresenceService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< IPresenceService::Service, ::interfaces::PresenceGetStateAndSubRequest, ::interfaces::PresenceState>(
          std::mem_fn(&IPresenceService::Service::PresenceGetStateAndSub), this)));
}

IPresenceService::Service::~Service() {
}

::grpc::Status IPresenceService::Service::PresenceConnect(::grpc::ServerContext* context, const ::interfaces::PresenceConnectRequest* request, ::interfaces::PresenceState* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status IPresenceService::Service::PresenceGetStateAndSub(::grpc::ServerContext* context, const ::interfaces::PresenceGetStateAndSubRequest* request, ::interfaces::PresenceState* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace interfaces

