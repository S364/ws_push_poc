// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PresenceService.proto

#define _WIN32_WINNT 0x600
#define WIN32_LEAN_AND_MEAN

#include "PresenceService.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_push_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PUSH_TOKEN_push_2eproto;
namespace interfaces {
class PresenceConnectRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PresenceConnectRequest> _instance;
} _PresenceConnectRequest_default_instance_;
class PresenceStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PresenceState> _instance;
} _PresenceState_default_instance_;
class PresenceGetStateAndSubRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PresenceGetStateAndSubRequest> _instance;
} _PresenceGetStateAndSubRequest_default_instance_;
}  // namespace interfaces
static void InitDefaultsscc_info_PresenceConnectRequest_PresenceService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::interfaces::_PresenceConnectRequest_default_instance_;
    new (ptr) ::interfaces::PresenceConnectRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::interfaces::PresenceConnectRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PresenceConnectRequest_PresenceService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PresenceConnectRequest_PresenceService_2eproto}, {}};

static void InitDefaultsscc_info_PresenceGetStateAndSubRequest_PresenceService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::interfaces::_PresenceGetStateAndSubRequest_default_instance_;
    new (ptr) ::interfaces::PresenceGetStateAndSubRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::interfaces::PresenceGetStateAndSubRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PresenceGetStateAndSubRequest_PresenceService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PresenceGetStateAndSubRequest_PresenceService_2eproto}, {
      &scc_info_PUSH_TOKEN_push_2eproto.base,}};

static void InitDefaultsscc_info_PresenceState_PresenceService_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::interfaces::_PresenceState_default_instance_;
    new (ptr) ::interfaces::PresenceState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::interfaces::PresenceState::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PresenceState_PresenceService_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PresenceState_PresenceService_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_PresenceService_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_PresenceService_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_PresenceService_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_PresenceService_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::interfaces::PresenceConnectRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::interfaces::PresenceConnectRequest, userid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::interfaces::PresenceState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::interfaces::PresenceState, version_),
  PROTOBUF_FIELD_OFFSET(::interfaces::PresenceState, dummy_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::interfaces::PresenceGetStateAndSubRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::interfaces::PresenceGetStateAndSubRequest, userid_),
  PROTOBUF_FIELD_OFFSET(::interfaces::PresenceGetStateAndSubRequest, token_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::interfaces::PresenceConnectRequest)},
  { 6, -1, sizeof(::interfaces::PresenceState)},
  { 13, -1, sizeof(::interfaces::PresenceGetStateAndSubRequest)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::interfaces::_PresenceConnectRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::interfaces::_PresenceState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::interfaces::_PresenceGetStateAndSubRequest_default_instance_),
};

const char descriptor_table_protodef_PresenceService_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025PresenceService.proto\022\ninterfaces\032\npus"
  "h.proto\"(\n\026PresenceConnectRequest\022\016\n\006Use"
  "rId\030\001 \001(\t\"/\n\rPresenceState\022\017\n\007Version\030\001 "
  "\001(\005\022\r\n\005Dummy\030\002 \001(\005\"K\n\035PresenceGetStateAn"
  "dSubRequest\022\016\n\006UserId\030\001 \001(\t\022\032\n\005Token\030\002 \001"
  "(\0132\013.PUSH_TOKEN2\304\001\n\020IPresenceService\022P\n\017"
  "PresenceConnect\022\".interfaces.PresenceCon"
  "nectRequest\032\031.interfaces.PresenceState\022^"
  "\n\026PresenceGetStateAndSub\022).interfaces.Pr"
  "esenceGetStateAndSubRequest\032\031.interfaces"
  ".PresenceStateB\r\252\002\ninterfacesb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_PresenceService_2eproto_deps[1] = {
  &::descriptor_table_push_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_PresenceService_2eproto_sccs[3] = {
  &scc_info_PresenceConnectRequest_PresenceService_2eproto.base,
  &scc_info_PresenceGetStateAndSubRequest_PresenceService_2eproto.base,
  &scc_info_PresenceState_PresenceService_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_PresenceService_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_PresenceService_2eproto = {
  false, false, descriptor_table_protodef_PresenceService_2eproto, "PresenceService.proto", 437,
  &descriptor_table_PresenceService_2eproto_once, descriptor_table_PresenceService_2eproto_sccs, descriptor_table_PresenceService_2eproto_deps, 3, 1,
  schemas, file_default_instances, TableStruct_PresenceService_2eproto::offsets,
  file_level_metadata_PresenceService_2eproto, 3, file_level_enum_descriptors_PresenceService_2eproto, file_level_service_descriptors_PresenceService_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_PresenceService_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_PresenceService_2eproto)), true);
namespace interfaces {

// ===================================================================

void PresenceConnectRequest::InitAsDefaultInstance() {
}
class PresenceConnectRequest::_Internal {
 public:
};

PresenceConnectRequest::PresenceConnectRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:interfaces.PresenceConnectRequest)
}
PresenceConnectRequest::PresenceConnectRequest(const PresenceConnectRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  userid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_userid().empty()) {
    userid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_userid(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:interfaces.PresenceConnectRequest)
}

void PresenceConnectRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PresenceConnectRequest_PresenceService_2eproto.base);
  userid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PresenceConnectRequest::~PresenceConnectRequest() {
  // @@protoc_insertion_point(destructor:interfaces.PresenceConnectRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PresenceConnectRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  userid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PresenceConnectRequest::ArenaDtor(void* object) {
  PresenceConnectRequest* _this = reinterpret_cast< PresenceConnectRequest* >(object);
  (void)_this;
}
void PresenceConnectRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PresenceConnectRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PresenceConnectRequest& PresenceConnectRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PresenceConnectRequest_PresenceService_2eproto.base);
  return *internal_default_instance();
}


void PresenceConnectRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:interfaces.PresenceConnectRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  userid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PresenceConnectRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string UserId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_userid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "interfaces.PresenceConnectRequest.UserId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PresenceConnectRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:interfaces.PresenceConnectRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string UserId = 1;
  if (this->userid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_userid().data(), static_cast<int>(this->_internal_userid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "interfaces.PresenceConnectRequest.UserId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_userid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:interfaces.PresenceConnectRequest)
  return target;
}

size_t PresenceConnectRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:interfaces.PresenceConnectRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string UserId = 1;
  if (this->userid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_userid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PresenceConnectRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:interfaces.PresenceConnectRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PresenceConnectRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PresenceConnectRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:interfaces.PresenceConnectRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:interfaces.PresenceConnectRequest)
    MergeFrom(*source);
  }
}

void PresenceConnectRequest::MergeFrom(const PresenceConnectRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:interfaces.PresenceConnectRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.userid().size() > 0) {
    _internal_set_userid(from._internal_userid());
  }
}

void PresenceConnectRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:interfaces.PresenceConnectRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PresenceConnectRequest::CopyFrom(const PresenceConnectRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:interfaces.PresenceConnectRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PresenceConnectRequest::IsInitialized() const {
  return true;
}

void PresenceConnectRequest::InternalSwap(PresenceConnectRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  userid_.Swap(&other->userid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata PresenceConnectRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PresenceState::InitAsDefaultInstance() {
}
class PresenceState::_Internal {
 public:
};

PresenceState::PresenceState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:interfaces.PresenceState)
}
PresenceState::PresenceState(const PresenceState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&dummy_) -
    reinterpret_cast<char*>(&version_)) + sizeof(dummy_));
  // @@protoc_insertion_point(copy_constructor:interfaces.PresenceState)
}

void PresenceState::SharedCtor() {
  ::memset(&version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dummy_) -
      reinterpret_cast<char*>(&version_)) + sizeof(dummy_));
}

PresenceState::~PresenceState() {
  // @@protoc_insertion_point(destructor:interfaces.PresenceState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PresenceState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PresenceState::ArenaDtor(void* object) {
  PresenceState* _this = reinterpret_cast< PresenceState* >(object);
  (void)_this;
}
void PresenceState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PresenceState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PresenceState& PresenceState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PresenceState_PresenceService_2eproto.base);
  return *internal_default_instance();
}


void PresenceState::Clear() {
// @@protoc_insertion_point(message_clear_start:interfaces.PresenceState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dummy_) -
      reinterpret_cast<char*>(&version_)) + sizeof(dummy_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PresenceState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 Version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 Dummy = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          dummy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PresenceState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:interfaces.PresenceState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 Version = 1;
  if (this->version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_version(), target);
  }

  // int32 Dummy = 2;
  if (this->dummy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_dummy(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:interfaces.PresenceState)
  return target;
}

size_t PresenceState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:interfaces.PresenceState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 Version = 1;
  if (this->version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_version());
  }

  // int32 Dummy = 2;
  if (this->dummy() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_dummy());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PresenceState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:interfaces.PresenceState)
  GOOGLE_DCHECK_NE(&from, this);
  const PresenceState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PresenceState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:interfaces.PresenceState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:interfaces.PresenceState)
    MergeFrom(*source);
  }
}

void PresenceState::MergeFrom(const PresenceState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:interfaces.PresenceState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.version() != 0) {
    _internal_set_version(from._internal_version());
  }
  if (from.dummy() != 0) {
    _internal_set_dummy(from._internal_dummy());
  }
}

void PresenceState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:interfaces.PresenceState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PresenceState::CopyFrom(const PresenceState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:interfaces.PresenceState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PresenceState::IsInitialized() const {
  return true;
}

void PresenceState::InternalSwap(PresenceState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PresenceState, dummy_)
      + sizeof(PresenceState::dummy_)
      - PROTOBUF_FIELD_OFFSET(PresenceState, version_)>(
          reinterpret_cast<char*>(&version_),
          reinterpret_cast<char*>(&other->version_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PresenceState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PresenceGetStateAndSubRequest::InitAsDefaultInstance() {
  ::interfaces::_PresenceGetStateAndSubRequest_default_instance_._instance.get_mutable()->token_ = const_cast< ::PUSH_TOKEN*>(
      ::PUSH_TOKEN::internal_default_instance());
}
class PresenceGetStateAndSubRequest::_Internal {
 public:
  static const ::PUSH_TOKEN& token(const PresenceGetStateAndSubRequest* msg);
};

const ::PUSH_TOKEN&
PresenceGetStateAndSubRequest::_Internal::token(const PresenceGetStateAndSubRequest* msg) {
  return *msg->token_;
}
void PresenceGetStateAndSubRequest::clear_token() {
  if (GetArena() == nullptr && token_ != nullptr) {
    delete token_;
  }
  token_ = nullptr;
}
PresenceGetStateAndSubRequest::PresenceGetStateAndSubRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:interfaces.PresenceGetStateAndSubRequest)
}
PresenceGetStateAndSubRequest::PresenceGetStateAndSubRequest(const PresenceGetStateAndSubRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  userid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_userid().empty()) {
    userid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_userid(),
      GetArena());
  }
  if (from._internal_has_token()) {
    token_ = new ::PUSH_TOKEN(*from.token_);
  } else {
    token_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:interfaces.PresenceGetStateAndSubRequest)
}

void PresenceGetStateAndSubRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PresenceGetStateAndSubRequest_PresenceService_2eproto.base);
  userid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  token_ = nullptr;
}

PresenceGetStateAndSubRequest::~PresenceGetStateAndSubRequest() {
  // @@protoc_insertion_point(destructor:interfaces.PresenceGetStateAndSubRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PresenceGetStateAndSubRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  userid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete token_;
}

void PresenceGetStateAndSubRequest::ArenaDtor(void* object) {
  PresenceGetStateAndSubRequest* _this = reinterpret_cast< PresenceGetStateAndSubRequest* >(object);
  (void)_this;
}
void PresenceGetStateAndSubRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PresenceGetStateAndSubRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PresenceGetStateAndSubRequest& PresenceGetStateAndSubRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PresenceGetStateAndSubRequest_PresenceService_2eproto.base);
  return *internal_default_instance();
}


void PresenceGetStateAndSubRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:interfaces.PresenceGetStateAndSubRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  userid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && token_ != nullptr) {
    delete token_;
  }
  token_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PresenceGetStateAndSubRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string UserId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_userid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "interfaces.PresenceGetStateAndSubRequest.UserId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .PUSH_TOKEN Token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_token(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PresenceGetStateAndSubRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:interfaces.PresenceGetStateAndSubRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string UserId = 1;
  if (this->userid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_userid().data(), static_cast<int>(this->_internal_userid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "interfaces.PresenceGetStateAndSubRequest.UserId");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_userid(), target);
  }

  // .PUSH_TOKEN Token = 2;
  if (this->has_token()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::token(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:interfaces.PresenceGetStateAndSubRequest)
  return target;
}

size_t PresenceGetStateAndSubRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:interfaces.PresenceGetStateAndSubRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string UserId = 1;
  if (this->userid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_userid());
  }

  // .PUSH_TOKEN Token = 2;
  if (this->has_token()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *token_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PresenceGetStateAndSubRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:interfaces.PresenceGetStateAndSubRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PresenceGetStateAndSubRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PresenceGetStateAndSubRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:interfaces.PresenceGetStateAndSubRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:interfaces.PresenceGetStateAndSubRequest)
    MergeFrom(*source);
  }
}

void PresenceGetStateAndSubRequest::MergeFrom(const PresenceGetStateAndSubRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:interfaces.PresenceGetStateAndSubRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.userid().size() > 0) {
    _internal_set_userid(from._internal_userid());
  }
  if (from.has_token()) {
    _internal_mutable_token()->::PUSH_TOKEN::MergeFrom(from._internal_token());
  }
}

void PresenceGetStateAndSubRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:interfaces.PresenceGetStateAndSubRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PresenceGetStateAndSubRequest::CopyFrom(const PresenceGetStateAndSubRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:interfaces.PresenceGetStateAndSubRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PresenceGetStateAndSubRequest::IsInitialized() const {
  return true;
}

void PresenceGetStateAndSubRequest::InternalSwap(PresenceGetStateAndSubRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  userid_.Swap(&other->userid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(token_, other->token_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PresenceGetStateAndSubRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace interfaces
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::interfaces::PresenceConnectRequest* Arena::CreateMaybeMessage< ::interfaces::PresenceConnectRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::interfaces::PresenceConnectRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::interfaces::PresenceState* Arena::CreateMaybeMessage< ::interfaces::PresenceState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::interfaces::PresenceState >(arena);
}
template<> PROTOBUF_NOINLINE ::interfaces::PresenceGetStateAndSubRequest* Arena::CreateMaybeMessage< ::interfaces::PresenceGetStateAndSubRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::interfaces::PresenceGetStateAndSubRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
