// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: push.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_push_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_push_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_push_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_push_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_push_2eproto;
class ClientPing;
class ClientPingDefaultTypeInternal;
extern ClientPingDefaultTypeInternal _ClientPing_default_instance_;
class MessageHeader;
class MessageHeaderDefaultTypeInternal;
extern MessageHeaderDefaultTypeInternal _MessageHeader_default_instance_;
class PUSH_TOKEN;
class PUSH_TOKENDefaultTypeInternal;
extern PUSH_TOKENDefaultTypeInternal _PUSH_TOKEN_default_instance_;
class WSClientData;
class WSClientDataDefaultTypeInternal;
extern WSClientDataDefaultTypeInternal _WSClientData_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::ClientPing* Arena::CreateMaybeMessage<::ClientPing>(Arena*);
template<> ::MessageHeader* Arena::CreateMaybeMessage<::MessageHeader>(Arena*);
template<> ::PUSH_TOKEN* Arena::CreateMaybeMessage<::PUSH_TOKEN>(Arena*);
template<> ::WSClientData* Arena::CreateMaybeMessage<::WSClientData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum PushMessageType : int {
  PresenceService = 0,
  PushMessageType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  PushMessageType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool PushMessageType_IsValid(int value);
constexpr PushMessageType PushMessageType_MIN = PresenceService;
constexpr PushMessageType PushMessageType_MAX = PresenceService;
constexpr int PushMessageType_ARRAYSIZE = PushMessageType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PushMessageType_descriptor();
template<typename T>
inline const std::string& PushMessageType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PushMessageType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PushMessageType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PushMessageType_descriptor(), enum_t_value);
}
inline bool PushMessageType_Parse(
    const std::string& name, PushMessageType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PushMessageType>(
    PushMessageType_descriptor(), name, value);
}
// ===================================================================

class WSClientData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:WSClientData) */ {
 public:
  inline WSClientData() : WSClientData(nullptr) {};
  virtual ~WSClientData();

  WSClientData(const WSClientData& from);
  WSClientData(WSClientData&& from) noexcept
    : WSClientData() {
    *this = ::std::move(from);
  }

  inline WSClientData& operator=(const WSClientData& from) {
    CopyFrom(from);
    return *this;
  }
  inline WSClientData& operator=(WSClientData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WSClientData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WSClientData* internal_default_instance() {
    return reinterpret_cast<const WSClientData*>(
               &_WSClientData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(WSClientData& a, WSClientData& b) {
    a.Swap(&b);
  }
  inline void Swap(WSClientData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WSClientData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WSClientData* New() const final {
    return CreateMaybeMessage<WSClientData>(nullptr);
  }

  WSClientData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WSClientData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WSClientData& from);
  void MergeFrom(const WSClientData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WSClientData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "WSClientData";
  }
  protected:
  explicit WSClientData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_push_2eproto);
    return ::descriptor_table_push_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kSignatureFieldNumber = 2,
    kGenerationFieldNumber = 3,
  };
  // string UserId = 1;
  void clear_userid();
  const std::string& userid() const;
  void set_userid(const std::string& value);
  void set_userid(std::string&& value);
  void set_userid(const char* value);
  void set_userid(const char* value, size_t size);
  std::string* mutable_userid();
  std::string* release_userid();
  void set_allocated_userid(std::string* userid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_userid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_userid(
      std::string* userid);
  private:
  const std::string& _internal_userid() const;
  void _internal_set_userid(const std::string& value);
  std::string* _internal_mutable_userid();
  public:

  // string Signature = 2;
  void clear_signature();
  const std::string& signature() const;
  void set_signature(const std::string& value);
  void set_signature(std::string&& value);
  void set_signature(const char* value);
  void set_signature(const char* value, size_t size);
  std::string* mutable_signature();
  std::string* release_signature();
  void set_allocated_signature(std::string* signature);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_signature();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_signature(
      std::string* signature);
  private:
  const std::string& _internal_signature() const;
  void _internal_set_signature(const std::string& value);
  std::string* _internal_mutable_signature();
  public:

  // int32 Generation = 3;
  void clear_generation();
  ::PROTOBUF_NAMESPACE_ID::int32 generation() const;
  void set_generation(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_generation() const;
  void _internal_set_generation(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:WSClientData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr userid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signature_;
  ::PROTOBUF_NAMESPACE_ID::int32 generation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_push_2eproto;
};
// -------------------------------------------------------------------

class ClientPing PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ClientPing) */ {
 public:
  inline ClientPing() : ClientPing(nullptr) {};
  virtual ~ClientPing();

  ClientPing(const ClientPing& from);
  ClientPing(ClientPing&& from) noexcept
    : ClientPing() {
    *this = ::std::move(from);
  }

  inline ClientPing& operator=(const ClientPing& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientPing& operator=(ClientPing&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ClientPing& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClientPing* internal_default_instance() {
    return reinterpret_cast<const ClientPing*>(
               &_ClientPing_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ClientPing& a, ClientPing& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientPing* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientPing* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClientPing* New() const final {
    return CreateMaybeMessage<ClientPing>(nullptr);
  }

  ClientPing* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClientPing>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClientPing& from);
  void MergeFrom(const ClientPing& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientPing* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ClientPing";
  }
  protected:
  explicit ClientPing(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_push_2eproto);
    return ::descriptor_table_push_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDummyFieldNumber = 1,
  };
  // int32 Dummy = 1;
  void clear_dummy();
  ::PROTOBUF_NAMESPACE_ID::int32 dummy() const;
  void set_dummy(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_dummy() const;
  void _internal_set_dummy(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ClientPing)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 dummy_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_push_2eproto;
};
// -------------------------------------------------------------------

class PUSH_TOKEN PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:PUSH_TOKEN) */ {
 public:
  inline PUSH_TOKEN() : PUSH_TOKEN(nullptr) {};
  virtual ~PUSH_TOKEN();

  PUSH_TOKEN(const PUSH_TOKEN& from);
  PUSH_TOKEN(PUSH_TOKEN&& from) noexcept
    : PUSH_TOKEN() {
    *this = ::std::move(from);
  }

  inline PUSH_TOKEN& operator=(const PUSH_TOKEN& from) {
    CopyFrom(from);
    return *this;
  }
  inline PUSH_TOKEN& operator=(PUSH_TOKEN&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PUSH_TOKEN& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PUSH_TOKEN* internal_default_instance() {
    return reinterpret_cast<const PUSH_TOKEN*>(
               &_PUSH_TOKEN_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PUSH_TOKEN& a, PUSH_TOKEN& b) {
    a.Swap(&b);
  }
  inline void Swap(PUSH_TOKEN* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PUSH_TOKEN* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PUSH_TOKEN* New() const final {
    return CreateMaybeMessage<PUSH_TOKEN>(nullptr);
  }

  PUSH_TOKEN* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PUSH_TOKEN>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PUSH_TOKEN& from);
  void MergeFrom(const PUSH_TOKEN& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PUSH_TOKEN* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "PUSH_TOKEN";
  }
  protected:
  explicit PUSH_TOKEN(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_push_2eproto);
    return ::descriptor_table_push_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInstanceKeyFieldNumber = 1,
    kClientKeyFieldNumber = 2,
  };
  // int32 instanceKey = 1;
  void clear_instancekey();
  ::PROTOBUF_NAMESPACE_ID::int32 instancekey() const;
  void set_instancekey(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_instancekey() const;
  void _internal_set_instancekey(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 clientKey = 2;
  void clear_clientkey();
  ::PROTOBUF_NAMESPACE_ID::int32 clientkey() const;
  void set_clientkey(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_clientkey() const;
  void _internal_set_clientkey(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:PUSH_TOKEN)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 instancekey_;
  ::PROTOBUF_NAMESPACE_ID::int32 clientkey_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_push_2eproto;
};
// -------------------------------------------------------------------

class MessageHeader PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MessageHeader) */ {
 public:
  inline MessageHeader() : MessageHeader(nullptr) {};
  virtual ~MessageHeader();

  MessageHeader(const MessageHeader& from);
  MessageHeader(MessageHeader&& from) noexcept
    : MessageHeader() {
    *this = ::std::move(from);
  }

  inline MessageHeader& operator=(const MessageHeader& from) {
    CopyFrom(from);
    return *this;
  }
  inline MessageHeader& operator=(MessageHeader&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MessageHeader& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MessageHeader* internal_default_instance() {
    return reinterpret_cast<const MessageHeader*>(
               &_MessageHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(MessageHeader& a, MessageHeader& b) {
    a.Swap(&b);
  }
  inline void Swap(MessageHeader* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MessageHeader* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MessageHeader* New() const final {
    return CreateMaybeMessage<MessageHeader>(nullptr);
  }

  MessageHeader* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MessageHeader>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MessageHeader& from);
  void MergeFrom(const MessageHeader& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessageHeader* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MessageHeader";
  }
  protected:
  explicit MessageHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_push_2eproto);
    return ::descriptor_table_push_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
    kMessageTypeFieldNumber = 2,
  };
  // .PUSH_TOKEN token = 1;
  bool has_token() const;
  private:
  bool _internal_has_token() const;
  public:
  void clear_token();
  const ::PUSH_TOKEN& token() const;
  ::PUSH_TOKEN* release_token();
  ::PUSH_TOKEN* mutable_token();
  void set_allocated_token(::PUSH_TOKEN* token);
  private:
  const ::PUSH_TOKEN& _internal_token() const;
  ::PUSH_TOKEN* _internal_mutable_token();
  public:
  void unsafe_arena_set_allocated_token(
      ::PUSH_TOKEN* token);
  ::PUSH_TOKEN* unsafe_arena_release_token();

  // .PushMessageType MessageType = 2;
  void clear_messagetype();
  ::PushMessageType messagetype() const;
  void set_messagetype(::PushMessageType value);
  private:
  ::PushMessageType _internal_messagetype() const;
  void _internal_set_messagetype(::PushMessageType value);
  public:

  // @@protoc_insertion_point(class_scope:MessageHeader)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PUSH_TOKEN* token_;
  int messagetype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_push_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// WSClientData

// string UserId = 1;
inline void WSClientData::clear_userid() {
  userid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& WSClientData::userid() const {
  // @@protoc_insertion_point(field_get:WSClientData.UserId)
  return _internal_userid();
}
inline void WSClientData::set_userid(const std::string& value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:WSClientData.UserId)
}
inline std::string* WSClientData::mutable_userid() {
  // @@protoc_insertion_point(field_mutable:WSClientData.UserId)
  return _internal_mutable_userid();
}
inline const std::string& WSClientData::_internal_userid() const {
  return userid_.Get();
}
inline void WSClientData::_internal_set_userid(const std::string& value) {
  
  userid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void WSClientData::set_userid(std::string&& value) {
  
  userid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:WSClientData.UserId)
}
inline void WSClientData::set_userid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  userid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:WSClientData.UserId)
}
inline void WSClientData::set_userid(const char* value,
    size_t size) {
  
  userid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:WSClientData.UserId)
}
inline std::string* WSClientData::_internal_mutable_userid() {
  
  return userid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* WSClientData::release_userid() {
  // @@protoc_insertion_point(field_release:WSClientData.UserId)
  return userid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WSClientData::set_allocated_userid(std::string* userid) {
  if (userid != nullptr) {
    
  } else {
    
  }
  userid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), userid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:WSClientData.UserId)
}
inline std::string* WSClientData::unsafe_arena_release_userid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:WSClientData.UserId)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return userid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void WSClientData::unsafe_arena_set_allocated_userid(
    std::string* userid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (userid != nullptr) {
    
  } else {
    
  }
  userid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      userid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:WSClientData.UserId)
}

// string Signature = 2;
inline void WSClientData::clear_signature() {
  signature_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& WSClientData::signature() const {
  // @@protoc_insertion_point(field_get:WSClientData.Signature)
  return _internal_signature();
}
inline void WSClientData::set_signature(const std::string& value) {
  _internal_set_signature(value);
  // @@protoc_insertion_point(field_set:WSClientData.Signature)
}
inline std::string* WSClientData::mutable_signature() {
  // @@protoc_insertion_point(field_mutable:WSClientData.Signature)
  return _internal_mutable_signature();
}
inline const std::string& WSClientData::_internal_signature() const {
  return signature_.Get();
}
inline void WSClientData::_internal_set_signature(const std::string& value) {
  
  signature_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void WSClientData::set_signature(std::string&& value) {
  
  signature_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:WSClientData.Signature)
}
inline void WSClientData::set_signature(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  signature_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:WSClientData.Signature)
}
inline void WSClientData::set_signature(const char* value,
    size_t size) {
  
  signature_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:WSClientData.Signature)
}
inline std::string* WSClientData::_internal_mutable_signature() {
  
  return signature_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* WSClientData::release_signature() {
  // @@protoc_insertion_point(field_release:WSClientData.Signature)
  return signature_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WSClientData::set_allocated_signature(std::string* signature) {
  if (signature != nullptr) {
    
  } else {
    
  }
  signature_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signature,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:WSClientData.Signature)
}
inline std::string* WSClientData::unsafe_arena_release_signature() {
  // @@protoc_insertion_point(field_unsafe_arena_release:WSClientData.Signature)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return signature_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void WSClientData::unsafe_arena_set_allocated_signature(
    std::string* signature) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (signature != nullptr) {
    
  } else {
    
  }
  signature_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      signature, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:WSClientData.Signature)
}

// int32 Generation = 3;
inline void WSClientData::clear_generation() {
  generation_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WSClientData::_internal_generation() const {
  return generation_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WSClientData::generation() const {
  // @@protoc_insertion_point(field_get:WSClientData.Generation)
  return _internal_generation();
}
inline void WSClientData::_internal_set_generation(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  generation_ = value;
}
inline void WSClientData::set_generation(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_generation(value);
  // @@protoc_insertion_point(field_set:WSClientData.Generation)
}

// -------------------------------------------------------------------

// ClientPing

// int32 Dummy = 1;
inline void ClientPing::clear_dummy() {
  dummy_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ClientPing::_internal_dummy() const {
  return dummy_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ClientPing::dummy() const {
  // @@protoc_insertion_point(field_get:ClientPing.Dummy)
  return _internal_dummy();
}
inline void ClientPing::_internal_set_dummy(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  dummy_ = value;
}
inline void ClientPing::set_dummy(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_dummy(value);
  // @@protoc_insertion_point(field_set:ClientPing.Dummy)
}

// -------------------------------------------------------------------

// PUSH_TOKEN

// int32 instanceKey = 1;
inline void PUSH_TOKEN::clear_instancekey() {
  instancekey_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PUSH_TOKEN::_internal_instancekey() const {
  return instancekey_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PUSH_TOKEN::instancekey() const {
  // @@protoc_insertion_point(field_get:PUSH_TOKEN.instanceKey)
  return _internal_instancekey();
}
inline void PUSH_TOKEN::_internal_set_instancekey(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  instancekey_ = value;
}
inline void PUSH_TOKEN::set_instancekey(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_instancekey(value);
  // @@protoc_insertion_point(field_set:PUSH_TOKEN.instanceKey)
}

// int32 clientKey = 2;
inline void PUSH_TOKEN::clear_clientkey() {
  clientkey_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PUSH_TOKEN::_internal_clientkey() const {
  return clientkey_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PUSH_TOKEN::clientkey() const {
  // @@protoc_insertion_point(field_get:PUSH_TOKEN.clientKey)
  return _internal_clientkey();
}
inline void PUSH_TOKEN::_internal_set_clientkey(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  clientkey_ = value;
}
inline void PUSH_TOKEN::set_clientkey(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_clientkey(value);
  // @@protoc_insertion_point(field_set:PUSH_TOKEN.clientKey)
}

// -------------------------------------------------------------------

// MessageHeader

// .PUSH_TOKEN token = 1;
inline bool MessageHeader::_internal_has_token() const {
  return this != internal_default_instance() && token_ != nullptr;
}
inline bool MessageHeader::has_token() const {
  return _internal_has_token();
}
inline void MessageHeader::clear_token() {
  if (GetArena() == nullptr && token_ != nullptr) {
    delete token_;
  }
  token_ = nullptr;
}
inline const ::PUSH_TOKEN& MessageHeader::_internal_token() const {
  const ::PUSH_TOKEN* p = token_;
  return p != nullptr ? *p : *reinterpret_cast<const ::PUSH_TOKEN*>(
      &::_PUSH_TOKEN_default_instance_);
}
inline const ::PUSH_TOKEN& MessageHeader::token() const {
  // @@protoc_insertion_point(field_get:MessageHeader.token)
  return _internal_token();
}
inline void MessageHeader::unsafe_arena_set_allocated_token(
    ::PUSH_TOKEN* token) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(token_);
  }
  token_ = token;
  if (token) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MessageHeader.token)
}
inline ::PUSH_TOKEN* MessageHeader::release_token() {
  auto temp = unsafe_arena_release_token();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::PUSH_TOKEN* MessageHeader::unsafe_arena_release_token() {
  // @@protoc_insertion_point(field_release:MessageHeader.token)
  
  ::PUSH_TOKEN* temp = token_;
  token_ = nullptr;
  return temp;
}
inline ::PUSH_TOKEN* MessageHeader::_internal_mutable_token() {
  
  if (token_ == nullptr) {
    auto* p = CreateMaybeMessage<::PUSH_TOKEN>(GetArena());
    token_ = p;
  }
  return token_;
}
inline ::PUSH_TOKEN* MessageHeader::mutable_token() {
  // @@protoc_insertion_point(field_mutable:MessageHeader.token)
  return _internal_mutable_token();
}
inline void MessageHeader::set_allocated_token(::PUSH_TOKEN* token) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete token_;
  }
  if (token) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(token);
    if (message_arena != submessage_arena) {
      token = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, token, submessage_arena);
    }
    
  } else {
    
  }
  token_ = token;
  // @@protoc_insertion_point(field_set_allocated:MessageHeader.token)
}

// .PushMessageType MessageType = 2;
inline void MessageHeader::clear_messagetype() {
  messagetype_ = 0;
}
inline ::PushMessageType MessageHeader::_internal_messagetype() const {
  return static_cast< ::PushMessageType >(messagetype_);
}
inline ::PushMessageType MessageHeader::messagetype() const {
  // @@protoc_insertion_point(field_get:MessageHeader.MessageType)
  return _internal_messagetype();
}
inline void MessageHeader::_internal_set_messagetype(::PushMessageType value) {
  
  messagetype_ = value;
}
inline void MessageHeader::set_messagetype(::PushMessageType value) {
  _internal_set_messagetype(value);
  // @@protoc_insertion_point(field_set:MessageHeader.MessageType)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::PushMessageType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::PushMessageType>() {
  return ::PushMessageType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_push_2eproto
